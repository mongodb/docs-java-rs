.. _java-rs-write-update-docs:

=================
Update Documents
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code examples, write, change, edit

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to delete
documents from a MongoDB collection by performing update operations.

An update operation updates one or more documents in a MongoDB collection.
You can perform an update operation by using the ``updateOne()`` or
``updateMany()`` methods.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. 

.. TODO:
.. Once get started ticket merged in, link the get started tutorial below

.. To learn how to create a
.. free MongoDB Atlas cluster and load the sample datasets, see the
.. :ref:`<java-rs-getting-started>` tutorial.

.. TODO: When write insert methods merged in, add subscriber methods section includes within subscriber methods section

.. Subscriber Methods
.. ~~~~~~~~~~~~~~~~~~~

Update Operations
-----------------

You can perform update operations in MongoDB by using the following methods:

- ``updateOne()``, which updates *the first document* that matches the search criteria
- ``updateMany()``, which updates *all documents* that match the search criteria

Each update method requires the following parameters:

- A query filter document, which determines which documents to update. For more
  information about using query filters, see :ref:`Filters <java-rs-update-filters>`.

- An update document, which specifies the update operator (the kind of update to
  perform) and the fields and values that should change. For more information
  about update documents, see :ref:`Update Operators <java-rs-update-operators>`.

.. _java-rs-update-filters:

Filters
~~~~~~~

Each update method requires a **query filter**, which specifies the
search criteria that determine which documents to select for updates. To facilitate the creation of filter objects, the
driver provides the ``Filters``class that provides filter condition helper
methods. 

To view a list of ``Filters`` helpers, see the `Filters
API documentation <{+api+}/mongodb-driver-core/com/mongodb/client/model/Filters.html>`__.
For more information about query filters, see the 
:manual:`Query Filter Documents section </core/document/#query-filter-documents>` in
the MongoDB Server manual. 

.. _java-rs-update-operators:

Update Operators
~~~~~~~~~~~~~~~~

To change a field in a document, MongoDB provides update operators.
To specify the modification to perform using the update operators,
create an update document. To learn more about update operators, see
:manual:`Update Operators </reference/operator/update/>` in the Server manual.

To facilitate the creation of update documents, the driver
provides the ``Updates`` helper class.

.. important::

   The ``id`` field is immutable, so you cannot change the value of the
   ``id`` field in a document.

Update One Document
-------------------

To update a single document from a MongoDB collection, call the ``updateOne()``
method and pass in your query filter as the first argument. Then, pass in your
update operators as the second argument to the ``updateOne()`` method. After you call the
``updateOne()`` method, chain the ``subscribe()`` method and pass in a subscriber.

The following example uses ``Updates.set()`` to update a document in the
``restaurants`` collection with a ``name`` value of ``Bagels N Buns`` to have
the name ``2 Bagels 2 Buns``.

.. code-block:: java
   :copyable: true

    ObservableSubscriber<UpdateResult> updateOneSubscriber = new SubscriberHelpers.OperationSubscriber<>();
    restaurants.updateOne(eq("name", "Bagels N Buns"), set("name", "2
    Bagels 2 Buns")).subscribe(updateOneSubscriber);
    updateOneSubscriber.await();

Update Multiple Documents
-------------------------

To update multiple documents from a MongoDB collection, call the ``updateMany()``
method and pass in your query filter. Then, pass in your
update operators as the second argument to the ``updateMany()`` method. After you call the
``updateMany()`` method, chain the ``subscribe()`` method and pass in a subscriber.

The following example updates all documents in the ``restaurants`` collection
with a ``borough`` value of ``"Brooklyn"`` to have a star value of 4:

.. code-block:: java
   :copyable: true

    ObservableSubscriber<UpdateResult> updateManySubscriber = new SubscriberHelpers.OperationSubscriber<>();
    restaurants.updateMany(eq("cuisine", "Pizza"), set("cuisine", "Pasta")).subscribe(updateManySubscriber);
    updateManySubscriber.await();

Customize the Update Operation
------------------------------

The ``UpdateOptions`` class contains methods that modify
the behavior of update methods. To use the ``UpdateOptions``
class, construct a new instance of the class, then call one or more of its methods
to modify the update operation. You can chain these method calls together.
To modify the behavior of the update operation, pass the class instance and
chained method calls as the second argument to the
``updateOne()`` or ``updateMany()`` method.

You can use the following methods in the ``updateOptions`` class
to modify an update method. All methods are optional.

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``array_filters (List<? extends Bson> arrayFilters)``
     - | A list of filters that specifies which array elements an update applies
         to.

   * - ``bypass_document_validation (Boolean bypass_document_validation)``
     - | Specifies whether the update operation bypasses document validation. This lets you 
         update documents that don't meet the schema validation requirements, if any 
         exist. For more information about schema validation, see :manual:`Schema
         Validation </core/schema-validation/#schema-validation>` in the MongoDB
         Server manual.
      
   * - ``collation (Collation collation)``
     - | Specifies the kind of language collation to use when sorting
         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`
         in the MongoDB Server manual.  

   * - ``comment (Bson comment)``
     - | A comment to attach to the operation. For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         MongoDB Server manual.  

   * - ``comment (String comment)``
     - | A comment to attach to the operation. For more information, see the :manual:`insert command
         fields </reference/command/insert/#command-fields>` guide in the
         MongoDB Server manual.  

   * - ``hint (Bson hint)``
     - | Gets or sets the index to scan for documents. 
         For more information, see the :manual:`hint statement </reference/command/update/#std-label-update-command-hint>`
         in the MongoDB Server manual.

   * - ``hint (String hint)``
     - | Gets or sets the index to scan for documents. 
         For more information, see the :manual:`hint statement </reference/command/update/#std-label-update-command-hint>`
         in the MongoDB Server manual.

   * - ``let (Bson variables)``
     - | A Map of parameter names and values. Values must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/update/#std-label-update-let-syntax>` in the
         MongoDB Server manual.

   * - ``upsert (Boolean upsert)``
     - | Specifies whether the update operation performs an upsert operation if no 
         documents match the query filter. For more information, see the :manual:`upsert
         statement </reference/command/update/#std-label-update-command-upsert>`
         in the MongoDB Server manual.

Example
~~~~~~~

The following code uses the ``updateMany()`` method to find all documents where the 
``borough`` field has the value ``"Manhattan"``. It then updates the ``borough``
value in these documents to ``"Manhattan (north)"``. Because the ``upsert`` option is
set to ``True``, the {+driver-short+} inserts a new document if the query filter doesn't 
match any existing documents.


.. code-block:: java
   :copyable: true

    ObservableSubscriber <UpdateResult> updateManySubscriber = new SubscriberHelpers.OperationSubscriber<>();
    restaurants.updateMany(eq("borough", "Manhattan"), set("borough", "Manhattan
    (north)"), new UpdateOptions().upsert(true)).subscribe(updateManySubscriber);
    updateManySubscriber.await();

Return Value
------------

The ``updateOne()`` and ``updateMany()`` methods each return an ``UpdateResult`` 
object. The ``UpdateResult`` type contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``getMatchedCount()``
     - | The number of documents that matched the query filter, regardless of
         how many were updated.

   * - ``getModifiedCount()`
     - | The number of documents modified by the update operation. If an updated
         document is identical to the original, it is not included in this
         count.

   * - ``getUpsertedId()`
     - | The ID of the document that was upserted in the database, if the driver
         performed an upsert. Otherwise ``null``.
         
   * - ``wasAcknowledged()``
     - | Returns true if the update was acknowledged.

.. Additional Information
----------------------

.. TODO:
.. For runnable code examples of inserting documents with {+driver-short+}, see
.. :ref: ADD HERE

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `updateOne() <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/MongoCollection.html#updateOne(com.mongodb.reactivestreams.client.ClientSession,org.bson.conversions.Bson,java.util.List)>`__
- `updateMany()
  <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/MongoCollection.html#updateMany(com.mongodb.reactivestreams.client.ClientSession,org.bson.conversions.Bson,java.util.List)>`__
- `UpdateOptions
  <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/mongodb-driver-core/com/mongodb/client/model/UpdateOptions.html>`__
- `BsonValue
  <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/bson/org/bson/BsonValue.html>`__
- `Collation
  <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/mongodb-driver-core/com/mongodb/client/model/Collation.html>`__
















