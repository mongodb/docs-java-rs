.. _java-rs-read-preference:

===============
Read Preference
===============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, preference, option

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To choose which member of a replica set to read from, you can configure read
preferences with the {+driver-short+}.

For read operations on replica sets or sharded clusters,
you can configure the read preference at the following levels:

- In a ``MongoClient`` in the following ways:
  
  - By creating a ``MongoClientSettings`` instance:

    .. code-block:: java
    
       MongoClient mongoClient = MongoClients.create(MongoClientSettings.builder()
           .applyConnectionString(new ConnectionString("mongodb://host1,host2"))
           .readPreference(ReadPreference.secondary())
           .build());

  - By creating a ``ConnectionString`` instance:

    .. code-block:: java
    
       MongoClient mongoClient = MongoClients.create("mongodb://host1:27017,host2:27017/?readPreference=secondary");

- In a ``MongoDatabase`` by using the ``withReadPreference()`` method:

  .. code-block:: java
  
     MongoDatabase database = mongoClient.getDatabase("test")
         .withReadPreference(ReadPreference.secondary());

- In a ``MongoCollection`` by using the ``withReadPreference()`` method:

  .. code-block:: java
  
     MongoCollection<Document> collection = database.getCollection("restaurants")
         .withReadPreference(ReadPreference.secondary());

``MongoDatabase`` and ``MongoCollection`` instances are immutable. Calling
``withReadPreference()`` on an existing ``MongoDatabase`` or
``MongoCollection`` instance returns a new instance and does not affect
the instance on which the method is called.

In the following example, the ``collectionWithReadPref`` instance
has the read preference of ``primaryPreferred`` whereas the read
preference of the ``collection`` is unaffected:

.. code-block:: java

   MongoCollection<Document> collectionWithReadPref = collection.withReadPreference(ReadPreference.primaryPreferred());

Read Concern
------------

For read operations on replica sets or sharded clusters,
applications can configure the read concern at the following levels:

- In a ``MongoClient`` in the following ways:
  
  - By creating a ``MongoClientSettings`` instance:

    .. code-block:: java
    
       MongoClient mongoClient = MongoClients.create(MongoClientSettings.builder()
           .applyConnectionString(new ConnectionString("mongodb://host1,host2"))
           .readConcern(ReadConcern.MAJORITY)
           .build());

  - By creating a ``ConnectionString`` instance:

    .. code-block:: java
    
       MongoClient mongoClient = MongoClients.create("mongodb://host1:27017,host2:27017/?readConcernLevel=majority");

- In a ``MongoDatabase`` by using the ``withReadConcern()`` method:

  .. code-block:: java
  
     MongoDatabase database = mongoClient.getDatabase("test")
         .withReadConcern(ReadConcern.MAJORITY);

- In a ``MongoCollection`` by using the ``withReadConcern()`` method:

  .. code-block:: java
  
     MongoCollection<Document> collection = database.getCollection("restaurants")
         .withReadConcern(ReadConcern.MAJORITY);

``MongoDatabase`` and ``MongoCollection`` instances are immutable. Calling
``withReadConcern()`` on an existing ``MongoDatabase`` or
``MongoCollection`` instance returns a new instance and does not affect
the instance on which the method is called.

In the following example, the ``collWithReadConcern`` instance has
an ``AVAILABLE`` read concern whereas the read concern of the ``collection``
is unaffected:

.. code-block:: java

   MongoCollection<Document> collWithReadConcern = collection.withReadConcern(ReadConcern.AVAILABLE);

You can build ``MongoClientSettings``, ``MongoDatabase``, or
``MongoCollection`` instances to include combinations of read concerns, read
preferences, and write concerns.

For example, the following code sets all three at the collection level:

.. code-block:: java

   collection = database.getCollection("restaurants")
       .withReadPreference(ReadPreference.primary())
       .withReadConcern(ReadConcern.MAJORITY)
       .withWriteConcern(WriteConcern.MAJORITY);